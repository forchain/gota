package ta_test

import (
	. "github.com/vertis/gota/ta"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)


var _ = Describe("Roc", func() {
	It("should return the correct values", func() {
		in := []float64 { 417.26, 419.34, 417.96, 417.4, 418.1, 417.61, 415.1, 414.34, 420.44, 420.77, 418.21, 418.86, 416.36, 412.64, 418.13, 414.96, 415.48, 414.99, 414.96, 410.34, 411.62, 408.78, 409.53, 413.85, 413.84, 413.82, 411.09, 413.77, 413.76 }
		out := []float64{ 0.0838805540909799, -1.011112700910944, -0.8661115896258027, 0.7283181600383375, 0.6386032049748765,
											0.14367472043293164, 0.9058058299204987, 0.4875223246609159, -1.8551993150033326, -0.6274211564512646,
											-0.7771215418091391, -0.8069522036002471, -0.32904217504083116, 0.5622334238076757, -1.8630569440126328,
          						-0.8048968575284304, -1.6125926639068175, -1.31569435408083, -0.26749566223249394, 0.85295121119072,
											0.5344735435595911, 0.5650961397328642, 1.0353331868239224, -0.021747009786162095 }

		Expect(Roc(in, 5)).To(Equal(out))
	})

	It("should return a nil array it can't do the calculation", func() {
		in := []float64 { 1.0 }
		var out []float64
		Expect(Roc(in, 5)).To(Equal(out))
	})
})
